Improve iteration speed:
- Introduce glslang to build system (either cmake or gradle) to validate glsl shaders at compile time, instead of waiting until runtime

Optimization ideas:
- Baking assets ahead of time into custom formats can reduce the amount of runtime massaging of data
necessary for models, textures, or skyboxes (texture arrays)
- Shaders could be stored as a constant string to avoid asset/resource file decompression/reads? But
would this conflict with compile time glsl validation?
- The native scene is currently taking multiple seconds to load. Profile code to see where performance
is bleeding.

Modularization ideas:
- NoopMathKotlin could be set up to be pulled from a maven repository instead of manually embedded into the project

Scene improvement:
- Mandelbrot scene
    - Increase max zoom
        - Best potential solution seems to be utilizing Perturbation Theory.
        - Failed attempts were made at trying to emulate higher floating point precision in the fragment shader.
    - Let user choose two accent colors

Refactoring:
- Scenes save format was previously used for loading from JSON files. World information is now hardcoded
 to reduce asset reads. Refactor save format code as it contains much superfluous code.

Bugs(?):
- Exiting a scene seems to sometimes show a frame or two of the users home screen wallpaper